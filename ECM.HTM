<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="Author" content="Dario Alejandro Alpern" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="Javascript application that factors integers using ECM and SIQS algorithms. Written by Dario Alpern." />
<link rel="alternate" hreflang="es" href="ECMC.HTM" />
<link rel="manifest" href="ecm.webmanifest">
<meta name="theme-color" content="#db5945">
<link rel="icon" href="favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="ecm-icon-180px.png">
<title>Integer factorization calculator</title>
<style>
@media print {#smallheader, .footer {display:none;}}
@media screen {
#smallheader {background-color:#000080; color:#FFFFFF; width:100%; margin:0px; text-align:center;}
#smallheader ul { padding:0; margin:0 auto; list-style:none; display:inline-block;}
#smallheader li { float:left; position:relative; display:block; margin-top:0px; margin-bottom:0px; margin-left:5px; margin-right:5px; background-color:#000080; color:#FFFFFF; font-family:"Arial", sans-serif; cursor: pointer; text-align:left;}
#smallheader li:hover {background-color:#004000; color:#FFFFFF;}
#smallheader li ul { display:none; position:absolute; }
#smallheader li:hover ul.alignleft{ display:block; height:auto;}
#smallheader li:hover ul.alignright{ display:block; height:auto; right:0px; background-color:#004000;}
#smallheader li ul li{ clear:both; white-space: nowrap; border:0px; background-color:#004000; width:100%; padding-top:1em; padding-bottom:0.5em}
#smallheader a:link{color:#FFFFFF; text-decoration: none;}
#smallheader a:visited{color:#FFFFFF; text-decoration: none;}
#smallheader a:hover{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader a:active{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader li ul li a:link{background-color:#004000; color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:visited{background-color:#004000;color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:hover{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
#smallheader li ul li a:active{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
.newline {clear:both;}
}
h2 > button {background-color:#eee; color:#444; cursor:pointer; padding:18px; font-weight:bold; font-size: 100%; width:100%; text-align:left; border:none; outline:none; transition:0.4s;}
h2 > button.active,h2 > button:hover {background-color:#ccc;}
h2 > button:after {content:"\002B"; color:#777; font-weight:bold; float:right; margin-left:5px;}
h2 > button.active:after {content:"\2212";}
.panel {padding: 0 10px; background-color:white; display:none; overflow:hidden;}
.atright {float:right;}
@media screen and (max-width: 400px) {#smallheader {font-size:0.7em;}}
@media screen and (min-width: 400px) {#smallheader {font-size:1em;}}
@media screen and (min-width: 500px) {#configleft {float:left;}}
body {font-family: arial; margin: 0; padding: 0; background-color:#FFFFFF; color:#000000}
h1 {text-align:center;}
fieldset {display:inline}
.lf,.labels {padding:0.2em; clear:both;}
.blue {color: #0000FF;}
.applet {margin-left: auto;margin-right: auto; border: 0px none;width:90%;text-align:center;background-color:#c0c0c0;padding:10px;}
#cont,#wizard,#feedback,#more,#stop,#skip {display:none;}
#digits {width:5em}
#value {white-space:pre;overflow-wrap:normal;overflow:auto;}
.inline {display:inline;}
.pad {padding:10px;}
.hex {font-family: Courier, "Lucida Console", monospace}
.und {text-decoration: underline;}
.verbose {display:none;}
.terse {display:inline;}
#tableCurves {max-width:700px; margin-left:auto; margin-right:auto;}
#help,#result,#status,#footer {margin: 3px; padding: 3px;}
#comments {width:90%}
.inputfbck{width: calc(100% - 10em);float:right;padding:3px;margin:0px;}
@media (min-width: 400px) {.input {width: calc(100% - 6em);float:right;padding:3px;margin:0px;}}
@media (max-width: 400px) {.input {width:100%;padding:3px;margin:0px;}}
@media screen and (min-width: 500px) {#formleft {float:left;width:50%;} #formright {float:right;width:50%;}}
.modal-header {padding: 2px 10px; background-color: #5cb85c; color: white;}
.modal-body {padding: 2px 10px;}
.modal-content {
  position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
  background-color: #fefefe;
  padding: 0;
  border: 1px solid #888;
  width: 80%;
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
}
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}
#close {float:right}
#modal-header-text {font-size:1.5em}
table, td, th { border: 1px solid gray }
</style>
<script type="text/galite">
<!--
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.galite=e():t.galite=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e,n){"use strict";function r(t,e){a[t]=e}function i(t){return a[t]}e.a=r,e.b=i;var a={}},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(){return(new Date).getTime()}function a(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(1===e.length&&e[0].constructor===Object)return e[0];switch(t){case"pageview":return{page:f(e,1)[0]};case"event":var n=f(e,4);return{eventCategory:n[0],eventAction:n[1],eventLabel:n[2],eventValue:n[3]};case"social":var r=f(e,3);return{socialNetwork:r[0],socialAction:r[1],socialTarget:r[2]};case"timing":var i=f(e,4);return{timingCategory:i[0],timingVar:i[1],timingValue:i[2],timingLabel:i[3]};default:return{}}}n.d(e,"a",function(){return d});var o=n(6),c=n(7),u=n(8),f=function(){function t(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,c=t[Symbol.iterator]();!(r=(o=c.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw a}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},l=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),d="t0",p=function(){function t(e){r(this,t),this.fields={trackingId:e},this.userId=Object(c.a)(),this._sendTo=o.a,this._getTime=i}return l(t,[{key:"send",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var i=s({hitType:t},a(t,n),this.fields),o=Object(u.a)(this.fields.trackingId,this._getTime(),this.userId,i);this._sendTo(o)}},{key:"get",value:function(t){return this.fields[t]}},{key:"set",value:function(t,e){this.fields[t]=e}}]),t}();e.b=p},function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function i(t){if(!Object(o.a)()){for(var e=a(t),n=d(e,2),r=n[0],i=n[1],s=!!c.a[t],l=!!f.b.prototype[i]&&"constructor"!==i,p=arguments.length,v=Array(p>1?p-1:0),g=1;g<p;g++)v[g-1]=arguments[g];if(s)c.a[t].apply(c.a,v);else if(l){var y=Object(u.b)(r);y[i].apply(y,v)}else{if("function"!=typeof t)throw new Error("Command "+t+" is not available in ga-lite");var b=Object(u.b)(r);t(b)}}}function a(t){return"string"==typeof t&&t.indexOf(".")>-1?t.split("."):[f.a,t]}Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var o=n(3),c=n(4),u=n(0),f=n(1),s=n(14),l=n(15),d=(n.n(l),function(){function t(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,c=t[Symbol.iterator]();!(r=(o=c.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw a}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}());Object.keys(c.a).forEach(function(t){i[t]=c.a[t]}),Object(s.a)().forEach(function(t){return i.apply(void 0,r(t))})},function(t,e,n){"use strict";function r(){return 1===parseInt(navigator.msDoNotTrack||window.doNotTrack||navigator.doNotTrack,10)}e.a=r},function(t,e,n){"use strict";var r=n(5),i=n(13),a={create:r.a,getByName:i.a};e.a=a},function(t,e,n){"use strict";function r(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.a,r=(arguments[3],new a.b(t));return Object(i.a)(n,r),r}e.a=r;var i=n(0),a=n(1)},function(t,e,n){"use strict";function r(t){if("undefined"!=typeof navigator&&navigator.sendBeacon){if(navigator.sendBeacon(t))return}try{var e=new window.XMLHttpRequest;e.open("GET",t,!1),e.send()}catch(e){var n=new window.Image;n.src=t}}e.a=r},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window?window.localStorage:null;if(t&&t.getItem(i))return t.getItem(i);var e=Math.random()+"."+Math.random();return t&&t.setItem(i,e),e}e.a=r;var i="uid"},function(t,e,n){"use strict";function r(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=arguments.length>4&&void 0!==arguments[4]&&arguments[4],u=Object(a.a)(Object(o.a)(r));return Object(i.a)()+(u?"&"+u:"")+(c?"&aip=1":"")+"&cid="+n+"&tid="+t+"&z="+e}e.a=r;var i=n(9),a=n(11),o=n(12)},function(t,e,n){"use strict";function r(t,e){return"https://www.google-analytics.com/collect?v=1&ul=en-us&de=UTF-8"+Object(i.a)("dl",[document.location.href])+Object(i.a)("dt",[document.title])+Object(i.a)("sd",[window.screen.colorDepth,"-bit"])+Object(i.a)("sr",[window.screen.availHeight,"x",window.screen.availWidth])+Object(i.a)("vp",[window.innerWidth,"x",window.innerHeight])+Object(i.a)("dr",[document.referrer])}e.a=r;var i=n(10)},function(t,e,n){"use strict";function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return!t||e.indexOf(void 0)>-1?"":"&"+t+"="+e.map(encodeURIComponent).join("")}e.a=r},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(t).map(function(e){return[e,t[e]].map(i).map(encodeURIComponent).join("=")}).join("&")}function i(t){return"boolean"==typeof t?+t:t}e.a=r},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t){return Object.keys(t).filter(function(t){return o.hasOwnProperty(t)}).filter(function(e){return t[e]}).reduce(function(e,n){return a({},e,r({},o[n],t[n]))},{})}e.a=i;var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o={anonymizeIp:"aip",dataSource:"ds",queueTime:"qt",userId:"uid",sessionControl:"sc",referrer:"dr",campaignName:"cn",campaignSource:"cs",campaignMedium:"cm",campaignKeyword:"ck",campaignContent:"cc",campaignId:"ci",screenResolution:"sr",viewportSize:"vp",encoding:"de",screenColors:"sd",language:"ul",javaEnabled:"je",flashVersion:"fl",hitType:"t",nonInteraction:"ni",location:"dl",hostname:"dh",page:"dp",title:"dt",screenName:"cd",linkid:"linkid",appName:"an",appId:"aid",appVersion:"av",appInstallerId:"aiid",eventCategory:"ec",eventAction:"ea",eventLabel:"el",eventValue:"ev",currencyCode:"cu",socialNetwork:"sn",socialAction:"sa",socialTarget:"st",timingCategory:"utc",timingVar:"utv",timingValue:"utt",timingLabel:"utl",exDescription:"exd",exFatal:"exf",expId:"xid",expVar:"xvar"}},function(t,e,n){"use strict";function r(t){return Object(i.b)(t)}e.a=r;var i=n(0)},function(t,e,n){"use strict";function r(){return"undefined"==typeof window?[]:window.galite&&window.galite.q||[]}e.a=r},function(t,e){Array.from=Array.from||function(){var t;return(t=Array.prototype.slice).call.apply(t,arguments)}}]).default});
//-->
</script>
<script>
var blob = new Blob(Array.prototype.map.call(document.querySelectorAll('script[type=\'text\/galite\']'), function (oScript) { return oScript.textContent; }),{type: 'text/javascript'});
(function(e,t,n,i,s,a,c){e[n]=e[n]||function(){(e[n].q=e[n].q||[]).push(arguments)}
;a=t.createElement(i);c=t.getElementsByTagName(i)[0];a.async=true;a.src=s
;c.parentNode.insertBefore(a,c)
})(window,document,"galite","script",window.URL.createObjectURL(blob));
galite('create', 'UA-4438475-1', 'auto');
galite('send', 'pageview');
</script>
</head>
<body>
<nav id="smallheader">
<div class="atright"><a href="index.htm" hreflang="es" title="Sitio de Darío Alpern en español">ESP</a></div>
<ul>
<li>
Electronics
<ul class="alignleft">
<li><a href="INTEL.HTM" hreflang="es" title="All Intel microprocessors from the 4004 up to Pentium (Spanish only)">Intel Microprocessors</a></li>
</ul>
</li>
<li>
Mathematics
<ul class="alignleft">
<li><a href="CALTORS.HTM" title="HTML5 applications with JavaScript and WebAssembly implementing calculators">Calculators</a></li>
<li><a href="NUMBERT.HTM" title="Articles and programs about number theory">Number Theory</a></li>
<li><a href="PROBLEMS.HTM" title="Interesting math problems">Problems</a></li>
</ul>
</li>
<li>
Programs
<ul class="alignright">
<li><a href="ASSEM386.HTM" title="Programs written in 80386 Assembler">Assembler 80386</a></li>
<li><a href="JAVAPROG.HTM" title="HTML5 applications with JavaScript and WebAssembly">HTML5 applications</a></li>
<li><a href="GAMES.HTM" title="Computer games">Games</a></li>
</ul>
</li>
<li class="alignright">
Contact
<ul class="alignright">
<li><a href="EPERS.HTM" title="Personal information">Personal</a></li>
<li><a href="FORM.HTM" title="Form to send comments">Comments</a></li>
<li><a href="EGBOOK.HTM" title="Old and new guestbook">Guestbook</a></li>
<li><a href="DONATION.HTM" title="Donations to the author of this Web site">Donations</a></li>
</ul>
</li>
</ul>
<br class="newline"/>
</nav>
<main id="main">
<article>
<h1>Integer factorization calculator</h1>
<div class="pad">
<div id="a" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemref="b" class="inline">
<a href="ENGLISH.HTM" itemprop="url">
<span itemprop="title">Alpertron</span>
</a> ›
</div>
<div id="b" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" itemref="c" class="inline">
<a href="JAVAPROG.HTM" itemprop="url">
<span itemprop="title">Programs</span>
</a> ›
</div>
<div id="c" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="inline">
<a href="ECM.HTM" itemprop="url">
<span itemprop="title">Integer factorization calculator</span>
</a>
</div>
</div>
<form class="applet">
<label for="value">Value</label><textarea id="value" rows="4" class="input"></textarea>
<br class="newline"/>
One numerical expression or loop per line. Example: x=3;x=n(x);c&lt;=100;x&#8209;1
<div class="lf"></div>
<input type="button" id="more" value="More" />
<input type="button" id="eval" value="Only evaluate" />
<input type="button" id="factor" value="Factor" />
<input type="button" id="stop" value="Stop" />
<input type="button" id="helpbtn" value="Help" />
<input type="button" id="config" value="Config" />
<input type="button" id="openwizard" value="Wizard" />
<div class="lf"></div>
</form>
<div id="help" aria-live="polite">
<p>This application factors numbers or numeric expressions using two fast algorithms: the Elliptic Curve Method (ECM) and the Self-Initializing Quadratic Sieve (SIQS).</p>
<p>The program uses local storage to remember the progress of the factorization, so you can complete the factorization of a large number in several sessions. Your computer will remember the state of the factorization. You only have to reload this page.</p>
<p>Since all calculations are performed in your computer, you can disconnect it from the Internet while the factorization is in progress. You can even start this application without Internet connection after the first run.</p>
<p>The source code is written in C programming language and compiled to asm.js and WebAssembly, which are the languages used by Web navigators. The latter is faster, but it is not supported in all Web browsers. You can see the version while a number is being factored.</p>
<p>See <a href="ECMREC.HTM" title="ECM Factorization records">factorization records</a> for this application.</p>
<h2><button>Expressions</button></h2>
<div class="panel" id="exprorig">
<p>You can enter expressions that use the following operators, functions and parentheses:</p>
<p>
<ul>
<li> + for addition
<li> - for subtraction
<li> * for multiplication
<li> / for integer division
<li> % for modulus (remainder of the integer division)
<li> ^ or ** for exponentiation (the exponent must be greater than or equal to zero).
<li> <strong>&lt;</strong>, <strong>==</strong>, <strong>&gt;</strong>; <strong>&lt;=</strong>, <strong>&gt;=</strong>, != for comparisons. The operators return zero for false and -1 for true.
<li> <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>, <strong>NOT</strong> for binary logic.
<li> <strong>SHL</strong>: Shift left the number of bits (multiply by the power of 2) specified on the right operand. Example: 5 SHL 3 = 40.
<li> <strong>SHR</strong>: Shift right the number of bits (divide by the power of 2) specified on the right operand. Example: -19 SHL 2 = -5.
<li> <strong>n!</strong>: factorial (<var>n</var> must be greater than or equal to zero). Example: 6! = 6 &times; 5 &times; 4 &times; 3 &times; 2 = 720. 
<li> <strong>p#</strong>: primorial (product of all primes less or equal than <var>p</var>). Example: 12# = 11 &times; 7 &times; 5 &times; 3 &times; 2 = 2310.
<li> <strong>B(n)</strong>: Previous probable prime before <em>n</em>. Example: B(24) = 23.
<li> <strong>F(n)</strong>: Fibonacci number F<sub>n</sub> from the sequence 0, 1, 1, 2, 3, 5, 8, 13, 21, etc. where each element equals the sum of the previous two members of the sequence. Example: F(7) = 13.
<li> <strong>L(n)</strong>: Lucas number L<sub>n</sub> = F<sub><var>n</var>-1</sub> + F<sub><var>n</var>+1</sub>
<li> <strong>N(n)</strong>: Next probable prime after <em>n</em>. Example: N(24) = 29.
<li> <strong>P(n)</strong>: Unrestricted Partition Number (number of decompositions of <var>n</var> into sums of integers without regard to order). Example: P(4) = 5 because the number 4 can be partitioned in 5 different ways: 4 = 3+1 = 2+2 = 2+1+1 = 1+1+1+1.
<li> <strong>Gcd(m,n)</strong>: Greatest common divisor of these two integers. Example: GCD(12, 16) = 4.
<li> <strong>Modinv(m,n)</strong>: inverse of <var>m</var> modulo <var>n</var>, only valid when <var>m</var> and <var>n</var> are coprime, menaning that they do not have common factors. Example: Modinv(3,7) = 5 because 3 &times; 5 &equiv; 1 (mod 7)
<li> <strong>Modpow(m,n,r)</strong>: finds <var>m</var><sup><var>n</var></sup> modulo <var>r</var>. Example: Modpow(3, 4, 7) = 4, because 3<sup>4</sup> &equiv; 4 (mod 7).
<li> <strong>Totient(n)</strong>: finds the number of positive integers less than <var>n</var> which are relatively prime to <var>n</var>. Example: Totient(6) = 2 because 1 and 5 do not have common factors with 6.
<li> <strong>IsPrime(n)</strong>: returns zero if <var>n</var> is not probable prime, -1 if it is. Example: IsPrime(5) = -1.
<li> <strong>NumDivs(n)</strong>: Number of positive divisors of <var>n</var>. Example: NumDivs(28) = 6 because the divisors of 28 are 1, 2, 4, 7, 14 and 28.
<li> <strong>SumDivs(n)</strong>: Sum of all positive divisors of <var>n</var>. Example: SumDivs(28) = 56 because 1 + 2 + 4 + 7 + 14 + 28 = 56.
<li> <strong>NumDigits(n,r)</strong>: Number of digits of <var>n</var> in base <var>r</var>. Example: NumDigits(13, 2) = 4 because 13 in binary (base 2) is expressed as 1101.
<li> <strong>SumDigits(n,r)</strong>: Sum of digits of <var>n</var> in base <var>r</var>. Example: SumDigits(213, 10) = 6 because the sum of the digits expressed in decimal is 2+1+3 = 6.
<li> <strong>RevDigits(n,r)</strong>: finds the value obtained by writing backwards the digits of <var>n</var> in base <var>r</var>. Example: RevDigits(213, 10) = 312.
<li> <strong>ConcatFact(m,n)</strong>: Concatenates the prime factors of <var>n</var> according to the mode expressed in <var>m</var> which follows this table:</li></ul>
<table>
<caption>ConcatFact function modes</caption>
<tr><th scope="col">Mode</th><th scope="col">Order of factors</th><th scope="col">Repeated factors</th><th scope="col">Example</th></tr>
<tr><td>0</td><td>Ascending</td><td>No</td><td>concatfact(0,36) = 23</td></tr>
<tr><td>1</td><td>Descending</td><td>No</td><td>concatfact(1,36) = 32</td></tr>
<tr><td>2</td><td>Ascending</td><td>Yes</td><td>concatfact(2,36) = 2233</td></tr>
<tr><td>3</td><td>Descending</td><td>Yes</td><td>concatfact(3,36) = 3322</td></tr>
</table>
<p>You can use the prefix <em>0x</em> for hexadecimal numbers, for example 0x38 is equal to 56.</p>
</div>
<h2><button>Factoring using the Elliptic Curve Method (ECM)</button></h2>
<div class="panel">
<p>The notation <var>k</var> &equiv; <var>m</var> (mod <var>n</var>) means that the remainder of the division of <var>k</var> by <var>n</var> equals the remainder of the division of <var>m</var> by <var>n</var>. The number <var>n</var> is called modulus.</p>
<p>This method computes points in elliptic curves, which are represented by formulas such as <var>y</var>&sup2; &equiv; <var>x</var>&sup3; + <var>a</var><var>x</var> + <var>b</var> (mod <var>n</var>) where <var>n</var> is the number to factor.</p>
<p>In the next graphic you can see the points (<var>x</var>, <var>y</var>) for which <var>y</var>&sup2; &equiv; <var>x</var>&sup3; + 4<var>x</var> + 7 (mod <var>29</var>) holds.
Since the computation use modular arithmetic (in this case using the remainder of the division by 29), the points that belong to the elliptic curve cannot be represented as a continuous line. That would be the case if the operations were performed in real numbers.
<div class="lf"></div>
<canvas id="ellCurve" width="313" height="313"></canvas>
<p>Apart from the points shown above, we use another point, named O, or point at infinity.</p>
<p>Using complex formulas, we can define a sum of points. In this way a point (<var>x</var><sub>3</sub>, <var>y</var><sub>3</sub>) that belongs to the mentioned curve can be the sum of other points (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>) that also belong to the curve.</p>
<p>A point (<var>x</var>, <var>y</var>) can be added to itself several times, obtaining a new point (<var>x<sub>4</sub></var>, <var>y</var><sub>4</sub>) that is a multiple of (<var>x</var>, <var>y</var>).</p>
<p>When the modulus is a prime number, and 4<var>a</var>&sup3; + 27<var>b</var>&sup2; &equiv; 0 (mod <var>p</var>) is not true, the points that belong to the elliptic curve (including the point O) form a mathematical structure called group. The group order is the number of points. In the graphic we can see 31 points, so the group order is 32.
Since O + O = O, if we multiply any point by a multiple of the group order we obtain the point O.</p>
<p>Even though the value of the group order is difficult to find, it can be shown that it is near the prime number used as the modulus. By changing the curve, we obtain a different group, and its order also changes.</p>
<p>In order to factor a number <var>n</var>, we have to find a multiple of the group order corresponding to any of the prime factors of <var>n</var>.
<p>For each elliptic curve to process we try to find the point at infinity. There are two steps.</p> 
<p>In the first step, the algorithm multiplies points by powers of different prime numbers less than a bound named B1. When computing the greatest common divisor between the coordinate <var>x</var> of the computed point and the number to factor we can obtain the prime number we are searching if all prime factors of the group order are less than B1.</p>
<p>Using the result of the first step, the second step obtains multiples of that point up to the upper bound B2, and we multiply the coordinates x of all points found in this step. Finally we compute the gratest common divisor between the product and the number to factor. In this case we can obtain the prime number we are searching if all prime factors (except one) of the group order are less than B1 and the greatest prime factor of the group order is less than B2.</p>
<p>If the greatest common divisor equals 1, we have to try with a different curve by changing the parameters <var>a</var> and <var>b</var> and computing an initial point (<var>x</var>, <var>y</var>) that belongs to the new curve.</p>
<p>The program uses many optimizations that are outside the scope of this help to explain them here.</p>
<p>The execution time depends on the magnitude of the second largest prime factor and on your computer speed.</p>
<div class="tableCurves"><table>
<caption>Optimal values of B1 and expected curves</caption>
<tr><th scope="col">Digits</th><th scope="col">Values of B1</th><th scope="col">Expected curves</th></tr>
<tr><td>15</td><td>2000</td><td>25</td></tr>
<tr><td>20</td><td>11000</td><td>90</td></tr>
<tr><td>25</td><td>50000</td><td>300</td></tr>
<tr><td>30</td><td>250000</td><td>700</td></tr>
<tr><td>35</td><td>1 000000</td><td>1800</td></tr>
<tr><td>40</td><td>3 000000</td><td>5100</td></tr>
<tr><td>45</td><td>11 000000</td><td>10600</td></tr>
<tr><td>50</td><td>43 000000</td><td>19300</td></tr>
<tr><td>55</td><td>110 000000</td><td>49000</td></tr>
<tr><td>60</td><td>260 000000</td><td>124000</td></tr>
<tr><td>65</td><td>850 000000</td><td>210000</td></tr>
<tr><td>70</td><td>2900 000000</td><td>340000</td></tr>
</table></div>
<p>The program runs 25 curves with limit B1 = 2000, 300 curves with limit B1 = 50000, 1675 curves with limit B1 = 1000000 and finally it uses curves with limit B1 = 11000000 until all factors are found.</p>
</div>
<h2><button>Factoring a number in several machines</button></h2>
<div class="panel">
<p>The ECM factoring algorithm can be easily parallelized in several machines. In order to do it, run the factorization in the first computer from curve 1, run it in the second computer from curve 10000, in the third computer from curve 20000, and so on.
In order to change the curve number when a factorization is in progress, press the button named <strong>More</strong>, type this number on the input box located on the new window and press the <strong>New Curve</strong> button.</p>
<p>When one of the machines discovers a new factor, you should enter this factor in the other computers by typing it in the bottom-right input box and pressing Enter (or clicking the <strong>Factor</strong> button).</p>
</div>
<h2><button>Factoring using the Self Initializing Quadratic Sieve (SIQS)</button></h2>
<div class="panel">
<p>The notation <var>k</var> &equiv; <var>m</var> (mod <var>n</var>) means that the remainder of the division of <var>k</var> by <var>n</var> equals the remainder of the division of <var>m</var> by <var>n</var>. The number <var>n</var> is called modulus.</p>
<p>Let <var>N</var> be the number to be factored. This number must not be a perfect power. If somehow we find two integers <var>X</var> and <var>Y</var> such that <var>X</var>&sup2; &equiv; <var>Y</var> (mod <var>N</var>) and <var>X</var>&ne;<var>Y</var> (mod <var>N</var>), then gcd(<var>X</var>+<var>Y</var>, <var>N</var>) will reveal a proper factor of <var>N</var>.</p>
<p>In order to find these values <var>X</var> and <var>Y</var>, the method finds relations which have the form <var>t</var>&sup2; &equiv; <var>u</var> (mod <var>N</var>) where <var>u</var> is the product of small prime numbers. The set of these primes is the factor base. These relations will be found using sieving, which is outside the scope of this introduction.</p>
<p>The relations found are combined using multiplications. The left hand side will always be a square because is a product of squares, so the goal is to have a square at the right hand side. A number is a square when all its prime factors appear an even number of times.
<p>For example: let the number to factor be <var>N</var> = 1817 and we have found the following relations with factor base = {2, 7, 13}:</p>
<p>45&sup2; &equiv; 2<sup>4</sup> &times; 7<sup>0</sup> &times; 13<sup>1</sup></p>
<p>123&sup2; &equiv; 2<sup>10</sup> &times; 7<sup>0</sup> &times; 13<sup>1</sup></p>
<p>Both relations have non-square RHS, since the exponent of 13 is not even. But multiplying them we get:</p>
<p>84&sup2; &equiv; 2<sup>14</sup> &times; 13&sup2;</p>
<p>84&sup2; &equiv; (2<sup>7</sup>&times;13)&sup2;</p>
<p>Since 2<sup>7</sup>&times;13 &equiv; 1664 we get the factor gcd(84+1664, 1817) = 23.</p>
<p>Which relations have to multiplied to find a square in the RHS is a linear algebra problem and it is solved using matrices.</p>
<p>When the number to be factorized is in the range 31 to 95 digits, after computing some curves in order to find small factors, the program switches to SIQS (if the checkbox located below the applet enables it), which is an algorithm that is much faster than ECM when the number has two large prime factors.
Since this method needs a large amount of your computer's memory to store relations, if you restart the applet the factorization begins from scratch. In order to start factoring immediately using SIQS, you can enter 0 in the New Curve box.</p>
<table>
<caption>Threshold for switching to SIQS</caption>
<tr><th scope="row">Digits</th><td>31-55</td><td>56-60</td><td>61-65</td><td>66-70</td><td>71-75</td><td>76-80</td><td>81-85</td><td>86-90</td><td>91-95</td></tr>
<tr><th scope="row">Curve</th><td>10</td><td>15</td><td>22</td><td>26</td><td>35</td><td>50</td><td>100</td><td>150</td><td>200</td></tr>
</table>
</div>
<h2><button>Configuration</button></h2>
<div class="panel">
<p>You can change settings for this application by pressing the Config button when a factorization is not in progress. A new window will pop up where you can select different settings:</p>
<ul>
<li><strong>Digits per group</strong>: In order to improve readability, big numbers are separated by spaces forming groups of a fixed number of digits. With this input box, you can determine the number of digits in a group.</li> 
<li><strong>Verbose mode</strong>: It shows more information about the factors found.</li>
<li><strong>Pretty print</strong>: If this checkbox is set, the exponents are shown in superscripts and the multiplication sign is &quot; &times; &quot;. The application also shows the number of digits for numbers with more than 30 digits.
If the checkbox is not set, the exponents are preceded by the exponentiation sign &quot; ^ &quot; and the multiplication is indicated by asterisks. Also the number of digits is never displayed. This mode eases copying the results to other mathematical programs.</li>
<li><strong>Hexadecimal output</strong>: If this checkbox is set, the numbers are shown in hexadecimal format instead of decimal, which is the common notation.
To enter numbers in hexadecimal format, you will need to precede them by the string 0x. For instance 0x38 = 56. The program shows hexadecimal numbers with monospaced font.</li>
<li><strong>Use Cunningham tables on server</strong>: When selected, if the number to be factored has the form a<sup>b</sup> &pm; 1, the application will attempt to retrieve the known factors from the Web server.
In order to reduce the database, only factors with at least 14 digits are included, so the application will find the small factors. These factors comes from <a href="http://myfactors.mooo.com/">Jonathan Crombie list</a> and it includes 2674850 factors of Cunningham numbers.</li>
</ul>
<p>The configuration is saved in your device, so when you start again the Web browser, all settings remain the same.<p>
</div>
<h2><button>Batch factorization</button></h2>
<div class="panel">
<p>Write an expression per line, then press the appropriate button. The output will be placed in the lower pane.</p>
<p>Blank lines or comment lines (which start with a numeral '#' character) will be replicated on the lower pane.</p>
<p>Expression loop: with the following syntax you can factor or determine primality of several numbers typing only one line.
You have to type four or five expressions separated by semicolons:</p>
<ul>
<li>First expression: It must start with the string 'x=' and it sets the first value of x.</li>
<li>Second expression: It must start with the string 'x=' and it sets the next value of x.
<li>Third expression: It holds the end expression condition. If it is equal to zero (meaning false) the loop finishes, otherwise the loop continues.
<li>Fourth expression: It holds the expression to be factored.</li>
<li>Optional fifth expression: If this expression is different from zero (meaning true), the fourth expression is displayed or factored, and if is zero (meaning false), the fourth expression is ignored.
</ul>
<p>Except for the first expression, all other expressions must include the variable <var>x</var> and/or the counter <var>c</var>.</p>
<p>If the end expression is false after processing 1000 numbers, the Continue button will appear. Pressing this button will make the program to process the next 1000 numbers and so on.</p>
<p>Example 1: Find the factors of the first 100 numbers of the form prime minus one.
The line to type is: <code>x=3;x=n(x);c&lt;=100;x-1</code>.</p>
<p>Example 2: Find the Smith numbers less than 10000. A Smith number, according to Wikipedia, is a composite number for which, in a given base (in base 10 by default), the sum of its digits is equal to the sum of the digits in its prime factorization.
The line to type is: <code>x=1;x=x+1;x&lt;10000;x;sumdigits(x, 10)==sumdigits(concatfact(2,x),10) and not isprime(x)</code>
</div>
<h2><button>Source code</button></h2>
<div class="panel">
<p>You can download the source of the current program and the old factorization applet from <a href="https://github.com/alpertron/calculators">GitHub</a>. Notice that the source code is in C language and you need the
<a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html">Emscripten</a> environment in order to generate Javascript.</p>
</div>
<p>Written by Dario Alpern. Last updated 1 September 2019.</p>
</div>
<div id="helphelp"></div>
<div id="result" aria-live="polite"></div>
<div id="status"></div>
<form id="skip" class="pad">
<input type="button" id="skiptest" value="Skip test" />
</form>
<form id="cont" class="pad">
<input type="button" id="continue" value="Continue" />
</form>
<div class="footer pad">
<p>If you find any error or you have a comment, please fill in the <a href="#" id="formlink">form</a>.</p>
<p>If you like these calculators and you want to support free software, you can donate through Paypal:
<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="MR65QPWZM5JT6" />
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form></p>
</div>
</article>
</main>
<div id="modal-more" class="modal" role="dialog" aria-labelledby="moreopt">
<div class="modal-content">
<div class="modal-header"><span id="close-more" aria-label="close" class="atright">×</span><p id="moreopt">More options</p></div>
<div class="modal-body">
<div class="applet">
<p><label for="curve">New curve number or factor:</label></p><input type="number" id="curve" value="" class="input" min="0" step="1"/>
<input type="button" id="ncurve" value="New curve" />
<input type="button" id="nfactor" value="New factor" />
</div>
</div></div></div>
<div id="modal-config" class="modal" role="dialog" aria-labelledby="conf">
<div class="modal-content">
<div class="modal-header"><span id="close-config" aria-label="close" class="atright">×</span><p id="conf">Configuration</p></div>
<div class="modal-body">
<div class="applet">
<fieldset>
<legend>Configuration parameters</legend>
<div id="configleft">
<p><label for="digits">Digits per group</label> <input type="number" id="digits" value="6" min="0" max="10000" step="1"/></p>
<p><input type="checkbox" id="verbose"><label for="verbose">Verbose mode</label></p>
</div>
<div id="configright">
<p><input type="checkbox" id="pretty"><label for="pretty">Pretty print</label></p>
<p><input type="checkbox" id="hex"><label for="hex">Hexadecimal output</label></p>
<p><input type="checkbox" id="cunnin"><label for="cunnin">Use Cunningham tables on server</label></p>
</div>
</fieldset>
<p><input type="button" id="save-config" value="Save" /><input type="button" id="cancel-config" value="Cancel" /></p>
</div>
</div></div></div>
<aside id="wizard" class="pad">
<h1>Factorization wizard</h1>
<form class="applet">
<fieldset id="output" class="atright">
<legend>Output</legend>
<input type="radio" name="output" id="decW"><label for="decW"><span class="und">D</span>ecimal</label><br>
<input type="radio" name="output" id="hexW"><label for="hexW"><span class="und">H</span>exadecimal</label><br>
</fieldset>
<fieldset id="mode">
<legend>Wizard mode</legend>
<input type="radio" name="mode" id="oneexpr"><label for="oneexpr"><span class="und">P</span>rocess one expression</label><br>
<input type="radio" name="mode" id="loop"><label for="loop"><span class="und">P</span>rocess several expressions in a loop</label><br>
</fieldset>
<label for="wzdinput" id="wzddesc">1</label>
<br class="newline"/>
<input type="text" id="wzdinput" value="" placeholder="Number or numerical expression" class="input"/>
<br class="newline"/>
<p id="wzdexam">&nbsp;</p>
<input type="button" id="next" value="Next" />
<input type="button" id="cancel" value="Cancel" />
</form>
<h2>Expressions</h2>
<div id="exprcopy"></div>
<ul>
<li id="C">Variable <var>C</var>: number of expressions already processed.</li>
<li id="X">Variable <var>X</var>: variable changed on each iteration of the loop.</li>
</ul>
</aside>
<aside id="feedback">
<h1>Feedback form</h1>
<form class="applet" id="formfeedback">
<input type="hidden" name="subject" value="Integer factorization calculator feedback" />
<div id="formleft">
<div class="labels"><label for="name">Your name is:</label><input class="inputfbck" type="text" name="name" maxlength="40" id="name" autocomplete="name"/></div>
<div class="labels"><label for="age">Age:</label><input class="inputfbck" type="number" name="age" min="0" max="999" id="age" /></div>
<div class="labels"><label for="city">City:</label><input class="inputfbck" type="text" name="city" maxlength="70" id="city" autocomplete="address-level2"/></div>
<div class="labels"><label for="province">Province/State:</label><input class="inputfbck" type="text" name="province" maxlength="70" id="province" autocomplete="address-level1"/></div>
<div class="labels"><label for="country">Country:</label><input class="inputfbck" type="text" name="country" maxlength="70" id="country" autocomplete="country-name" /></div>
<div class="labels"><label for="reply">E-mail address:</label><input class="inputfbck" type="email" name="reply" maxlength="70" id="reply" autocomplete="email" /></div>
<p>Enter your e-mail address if you want a reply from the author of this application.</p>
<p><input type="checkbox" id="adduserdata"><label for="adduserdata">Send expression to be factored</label></p>
<input type="hidden" name="userdata" value="" id="userdata" />
</div>
<div id="formright">
<label for="comments">Please feel free to add comments:</label><br />
<textarea name="Comments" rows="7" cols="40" id="comments"></textarea>
<p><label for="how">How did you find my page?</label><br />
<select name="how" title="How did you find my page?" id="how">
<option value="Select response">Select response</option>
<option value="from a search engine">From a search engine</option>
<option value="from a friend">From a friend</option>
<option value="from a link">From a link</option>
<option value="from Wikipedia">From Wikipedia or another reference</option>
<option value="other">Other</option>
</select></p>
<fieldset><legend>Are the programs instructive?</legend>
<input type="radio" name="Instructive" value="Yes" id="insyes" /><label for="insyes">Yes</label>
<input type="radio" name="Instructive" value="No" id="insno" /><label for="insno">No</label>
</fieldset>
<fieldset><legend>Are the programs interesting?</legend>
<input type="radio" name="Interesting" value="Yes" id="intyes" /><label for="intyes">Yes</label>
<input type="radio" name="Interesting" value="No" id="intno" /><label for="intno">No</label>
</fieldset>
<p><input type="submit" value="Send it in!" id="formsend" />
<input type="reset" value="Reset" />
<input type="button" value="Cancel" id="formcancel" /></p>
</div>
<div class="lf"></div>
</form>
</aside>
<script>
<!--
(function(){function w(){a("next").value="Done";a("wzddesc").innerHTML="Step 1 of 1: Expression to factor";a("wzdexam").innerHTML="&nbsp;";h="";l=9}function a(a){return document.getElementById(a)}function m(a,d){window.localStorage.setItem(a,d)}function x(b,d){a("eval").style.display=b;a("factor").style.display=b;a("config").style.display=b;a("openwizard").style.display=b;a("stop").style.display=d;a("more").style.display=d}function y(b){a("modal-more").style.display="none";k&&k.terminate();k=0;q(b)}
function z(b){k||(u?r||(r=new Blob([new Uint8Array(v)])):r||(r=new Blob(Array.prototype.map.call(document.querySelectorAll("script[type='text/js-worker']"),function(a){return a.textContent}),{type:"text/javascript"})),k=new Worker(window.URL.createObjectURL(r)),k.onmessage=function(b){var c=b.data.substring(0,1);"9"==c&&console.log(b.data.substring(1));if("8"==c)m("ecmFactors",b.data.substring(1)),m("ecmCurve","");else if("7"==c)m("ecmCurve",b.data.substring(1));else if("4"==c)a("status").innerHTML=
b.data.substring(1);else if("5"==c)a("skip").style.display="1"==b.data.substring(1,2)?"block":"none";else if(a("result").innerHTML=b.data.substring(1),"2"==c||"6"==c)a("status").innerHTML="",x("inline","none"),a("modal-more").style.display="none","6"==c&&(a("cont").style.display="block")});u?k.postMessage(b):k.postMessage([b,v])}function q(b){var d;t=0+b;d=a("result");var c=a("value").value.replace(/\u2011/g,"-"),e=String.fromCharCode(0),n=a("helphelp");a("cont").style.display="none";a("help").style.display=
"none";n.style.display="block";n.innerHTML='<p class="pad">Press the <strong>Help</strong> button to get help about this application. Press it again to return to the factorization. Keyboard users can press CTRL+ENTER to start factorization. This is the '+(u?"asm.js":"WebAssembly")+" version.</p>";d.style.display="block";if(""==c)d.innerHTML="<p>Please type an expression.</p>";else if("undefined"===typeof Worker)d.innerHTML="<p>This calculator requires Web Workers. Please use another Web browser.</p>";
else{x("none","inline");d.innerHTML="<p>Factoring expression...</p>";-2>b&&(t+=6);d=g+","+t+","+f.substring(1)+c+e+window.localStorage.getItem("ecmFactors");if(-1==b||-2==b)d+=","+a("curve").value;if(-3==b||-4==b)d+=";"+a("curve").value;v?z(d+e):A=d+e}}function D(){a("next").value="Next";a("wzddesc").innerHTML="Step 1 of 5: Initial value of x";a("wzdexam").innerHTML="Do not use variables <var>x</var> or <var>c</var>. Example for Smith numbers less than 10000: <code>1</code>";l=1}function E(){var b=
a("next"),d=a("wzddesc"),c=a("wzdexam"),e=a("wzdinput"),n=a("value");b.disabled=!0;switch(++l){case 2:h+="x="+e.value;a("mode").style.display="none";d.innerHTML="Step 2 of 5: Value of x for new iteration";c.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x+1</code>";break;case 3:h+=";x="+e.value;d.innerHTML="Step 3 of 5: End loop condition";c.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x&lt;10000</code>";
break;case 4:h+=";"+e.value;d.innerHTML="Step 4 of 5: Expression to factor";c.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x</code>";break;case 5:h+=";"+e.value;b.value="Done";b.disabled=!1;d.innerHTML="Step 5 of 5: Process expression condition";c.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>sumdigits(x,10) == sumdigits(concatfact(2,x),10) and not isprime(x)</code>";
break;case 6:""!=e.value&&(h+=";"+e.value);n.value=h;l=0;a("hex").checked=a("hexW").checked;B();a("main").style.display="block";a("wizard").style.display="none";n.focus();break;default:l=0,n.value=e.value,a("hex").checked=a("hexW").checked,B(),a("main").style.display="block",a("wizard").style.display="none",n.focus()}l&&(e.value="",e.focus())}function B(){f="1"+(a("verbose").checked?"1":"0")+(a("pretty").checked?"1":"0")+(a("cunnin").checked?"1":"0")+(a("hex").checked?"1":"0");g=a("digits").value;
m("ecmConfig",g+","+f)}function F(a){var d=document.all?document.styleSheets[0].rules:document.styleSheets[0].cssRules,c,e=d.length;for(c=0;c<e;c++)".verbose"===d[c].selectorText&&(d[c].style.display=a?"inline":"none"),".terse"===d[c].selectorText&&(d[c].style.display=a?"none":"inline")}function G(){a("main").style.display="block";a("feedback").style.display="none";a("value").focus()}var C=[0,6,2,9,4,0,5,6,7,1,8,0,13,9,14,9,15,7,16,7,17,0,18,13,20,5,22,10,23,12,24,6,27,7],l=0,h,k=0,v=null,t,r,g,f,
A,u="undefined"===typeof WebAssembly,p=new XMLHttpRequest;p.open("GET",u?"ecmW0017.js":"ecm0017.wasm",!0);p.responseType="arraybuffer";p.onreadystatechange=function(){4==p.readyState&&200==p.status&&(v=p.response,A&&z(A))};p.send(null);window.addEventListener("load",function(){var b;t=0;a("value").a="off";a("eval").onclick=function(){m("ecmFactors","");q(0)};a("factor").onclick=function(){m("ecmFactors","");q(2)};a("more").onclick=function(){a("modal-more").style.display="block"};a("config").onclick=
function(){a("digits").value=g;a("verbose").checked="1"==f.substr(1,1);a("pretty").checked="1"==f.substr(2,1);a("cunnin").checked="1"==f.substr(3,1);a("hex").checked="1"==f.substr(4,1);a("modal-config").style.display="block"};a("openwizard").onclick=function(){a("main").style.display="none";a("wizard").style.display="block";a("mode").style.display="block";a("oneexpr").checked=!0;a("next").disabled=!0;a("wzdinput").value="";a("wzdinput").focus();a("hexW").checked="1"==f.substr(4,1);a("decW").checked=
"1"!=f.substr(4,1);w()};a("wzdinput").onkeydown=function(b){if(10==b.keyCode||13==b.keyCode)b.preventDefault(),0==a("next").disabled&&E();b.altKey&&(80==b.keyCode?(b.preventDefault(),a("oneexpr").checked?(a("oneexpr").checked=!1,a("loop").checked=!0,D()):(a("oneexpr").checked=!0,a("loop").checked=!1,w())):68==b.keyCode?(b.preventDefault(),a("decW").checked=!0,a("hexW").checked=!1):72==b.keyCode&&(b.preventDefault(),a("decW").checked=!1,a("hexW").checked=!0));return!0};a("oneexpr").onclick=function(){w()};
a("loop").onclick=function(){D()};a("next").onclick=function(){E()};a("wzdinput").oninput=function(){var b=a("wzdinput").value;a("next").disabled=""!=b?1==l||9==l||0<=b.lastIndexOf("x")||0<=b.lastIndexOf("c")||0<=b.lastIndexOf("X")||0<=b.lastIndexOf("C")?!1:!0:5==l?!1:!0};a("cancel").onclick=function(){a("main").style.display="block";a("wizard").style.display="none"};a("close-config").onclick=function(){a("modal-config").style.display="none"};a("cancel-config").onclick=function(){a("modal-config").style.display=
"none"};a("save-config").onclick=function(){B();F(a("verbose").checked);a("modal-config").style.display="none"};a("close-more").onclick=function(){a("modal-more").style.display="none"};a("ncurve").onclick=function(){y(-2)};a("nfactor").onclick=function(){y(-4)};a("curve").onkeypress=function(a){return 8==a.charCode||0==a.charCode?null:48<=a.charCode&&57>=a.charCode};a("stop").onclick=function(){k.terminate();k=0;x("inline","none");a("skip").style.display="none";a("result").innerHTML="<p>Calculation stopped by user</p>";
a("status").innerHTML=""};a("value").onkeydown=function(a){10!=a.keyCode&&13!=a.keyCode||!a.ctrlKey||(a.preventDefault(),m("ecmFactors",""),q(2));return!0};a("helpbtn").onclick=function(){var b=a("help").style,c=a("helphelp").style,d=a("result"),e=d.style;"block"==b.display&&""!=d.innerHTML?(b.display="none",c.display=e.display="block"):(b.display="block",c.display=e.display="none")};a("skiptest").onclick=function(){a("skip").style.display="none";y(4)};a("continue").onclick=function(){a("cont").style.display=
"none";z("C")};a("formlink").onclick=function(){a("main").style.display="none";a("feedback").style.display="block";a("formfeedback").reset();a("name").focus();return!1};a("formcancel").onclick=function(){G()};a("formsend").onclick=function(){a("userdata").value=a("adduserdata").checked?"\n"+a("value").value+"\n"+a("result").innerHTML+"\n"+a("status").innerHTML:"";var b=new XMLHttpRequest;b.onreadystatechange=function(){4==b.readyState&&(200==b.status?alert("Feedback sent successfully."):alert("Feedback could not be sent."),
G())};b.open("POST","/sendmail.php",!0);b.setRequestHeader("Content-type","application/x-www-form-urlencoded");for(var c=a("formfeedback").elements,d="",e=0,f=0;f<c.length;f++){var g=c[f];"radio"==g.type&&0==g.checked||!g.name||(e&&(d+="&"),d+=g.name+"="+encodeURIComponent(g.value),e++)}b.send(d);return!1};window.onclick=function(b){var c=a("modal");b.target==c&&(c.style.display="none")};b=document.querySelectorAll("h2");var d;for(d=0;d<b.length;d++)b[d].addEventListener("click",function(){this.children[0].classList.toggle("active");
var a=this.nextElementSibling;a.style.display="block"===a.style.display?"none":"block"});document.getElementById("exprcopy").innerHTML=document.getElementById("exprorig").innerHTML;var c=document.getElementById("ellCurve").getContext("2d");c.fillStyle="#FFFFFF";c.fillRect(0,0,313,313);c.fillStyle="#000000";c.strokeStyle="#808000";c.fillRect(20,0,290,290);for(b=0;290>=b;b+=10)c.moveTo(20+b,0),c.lineTo(20+b,290),c.stroke(),c.moveTo(20,b),c.lineTo(310,b),c.stroke();c.fillStyle="#00C000";var e;for(e=
0;e<C.length;e+=2)b=C[e],d=C[e+1],c.fillRect(10*b+21,10*(28-d)+1,9,9),0!=d&&c.fillRect(10*b+21,10*(d-1)+1,9,9);c.fillStyle="#000000";c.font="15px 'Times New Roman'";c.fillText("0",5,291);c.fillText("0",20,308);c.fillText("28",0,11);c.fillText("28",297,308);c.font="italic "+c.font;c.fillText("y",5,150);c.fillText("x",160,308);g=window.localStorage.getItem("ecmConfig");if(null==g||""==g)g=6,f="00100",m("ecmConfig",g+","+f);else if(b=g.indexOf(","),0>b)g=6,f="00100",m("ecmConfig",g+","+f);else{for(f=
g.substr(b+1);5>f.length;)f+="0";g=g.substr(0,b);F("1"==f.substr(1,1))}if(b=window.localStorage.getItem("ecmFactors"))a("value").value=b.slice(0,b.indexOf("=")),a("curve").value=window.localStorage.getItem("ecmCurve"),q(-2),a("curve").value="";"serviceWorker"in navigator&&navigator.serviceWorker.register("calcSW.js").then(function(){},function(){})})})(this);
//-->
</script>
<script type="text/js-worker">
<!--
var e,f,k,n={env:{databack:function(b){self.postMessage(l(b))},startSkipTest:function(){self.postMessage("51");skipTest=0},endSkipTest:function(){self.postMessage("52")},tenths:function(){return Math.floor((new Date).getTime()/100)},getCunn:function(b){var a=new XMLHttpRequest;a.open("GET","https://www.alpertron.com.ar/"+l(b),!1);a.send(null);200==a.status&&m(e.getFactorsAsciiPtr(),a.responseText)}}};
self.onmessage=function(b){k?(m(e.getInputStringPtr(),b.data[0]),e.doWork()):WebAssembly.instantiate(b.data[1],n).then(function(a){k=1;e=a.instance.exports;f=new Uint8Array(e.memory.buffer);m(e.getInputStringPtr(),b.data[0]);e.doWork()})};function l(b){var a=-1,c=0,g="",d="";do{for(c=0;1024>c;c++){a=f[b++>>0];if(0==a)break;128<=a&&(a=(a-192<<6)+f[b++>>0]-128);g+=String.fromCharCode(a)}d+=g;g=""}while(0!=a);return d+g}
function m(b,a){var c=b,g=a.length,d,h;for(d=0;d<g;d++)h=a.charCodeAt(d),128>h?f[c++]=h:(f[c++]=(h>>6)+192,f[c++]=(h&63)+128);f[c]=0};
//-->
</script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "WebApplication",
  "browserRequirements": "Requires HTML5. Requires Javascript.",
  "name": "Integer factorization calculator",
  "description": "Javascript application that factors integers using ECM and SIQS algorithms.",
  "operatingSystem": "Any",
  "applicationCategory": "https://schema.org/EducationalApplication",
  "author": {
    "@type": "Person",
    "name": "Dario Alpern"
  },
  "inLanguage": "en",
  "license": "https://www.gnu.org/licenses/gpl-3.0.en.html",
  "offers": {
    "@type": "Offer",
    "price": "0.00",
    "priceCurrency": "USD"
  }
}
</script>
</body>
</html>
