<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="Author" content="Dario Alejandro Alpern" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="keywords" content="waring, number theory" />
<meta name="description" content="Javascript application that finds the decomposition of a number into cubes. Written by Dario Alpern." />
<meta name="theme-color" content="#db5945">
<link rel="alternate" hreflang="es" href="SUMCUBOS.HTM" />
<link rel="manifest" href="fcubes.webmanifest">
<link rel="icon" href="favicon.ico" type="image/x-icon" />
<title>Sum of four cubes</title>
<style media="print">
#smallheader {display:none;}
</style>
<style media="screen">
#smallheader {background-color:#000080; width:100%; margin:0px; text-align:center;}
#smallheader ul { padding:0; margin:0 auto; list-style:none; display:inline-block;}
#smallheader li { float:left; position:relative; display:block; margin-top:0px; margin-bottom:0px; margin-left:5px; margin-right:5px; background-color:#000080; color:#FFFFFF; font-family:"Arial", sans-serif; cursor: pointer; text-align:left;}
#smallheader li:hover {background-color:#004000; color:#FFFFFF;}
#smallheader li ul { display:none; position:absolute; }
#smallheader li:hover ul.alignleft{ display:block; height:auto;}
#smallheader li:hover ul.alignright{ display:block; height:auto; right:0px; background-color:#004000;}
#smallheader li ul li{ clear:both; white-space: nowrap; border:0px; background-color:#004000; width:100%; padding-top:1em; padding-bottom:0.5em}
#smallheader a:link{color:#FFFFFF; text-decoration: none;}
#smallheader a:visited{color:#FFFFFF; text-decoration: none;}
#smallheader a:hover{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader a:active{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader li ul li a:link{background-color:#004000; color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:visited{background-color:#004000;color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:hover{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
#smallheader li ul li a:active{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
.inputfbck{width: calc(100% - 10em);float:right;padding:3px;margin:0px;}
@media (max-width: 400px) { #smallheader { font-size:0.7em;} }
@media (min-width: 400px) { #smallheader { font-size:1em;} }
@media (min-width: 500px) {#formleft {float:left;width:50%;} #formright {float:right;width:50%;}}
</style>
<style>
body {font-family: arial; margin: 0; padding: 0;}
h1 {text-align:center;}
fieldset {display:inline}
.applet {margin-left: auto;margin-right: auto; border: 0px none;width:95%;text-align:center;background-color:#c0c0c0;padding:10px;}
.atright {float:right;}
#num {white-space:pre;overflow-wrap:normal;overflow:auto;margin:5px;width:100%;padding:3px}
#stop, #cont, #wizard, #feedback {display:none}
.lf,.labels {padding:0.2em; clear:both; width:100%}
.offscr {position:absolute;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);padding:0;border:0;height:1px;width:1px;overflow:hidden;}
.bigger {font-size:150%;}
.pad {padding:10px;}
.hex {font-family: Courier, "Lucida Console", monospace}
.und {text-decoration: underline;}
@media (min-width: 400px) {.input {width: calc(100% - 6em);float:right;padding:3px;margin:0px;}}
@media (max-width: 400px) {.input {width:100%;padding:3px;margin:0px;}}
</style>
</head>
<body>
<nav id="smallheader">
<div style="float:right;"><a href="index.htm" hreflang="es" title="Sitio de Darío Alpern en español">ESP</a></div>
<ul>
<li>
Electronics
<ul class="alignleft">
<li>
<a href="INTEL.HTM" hreflang="es" title="All Intel microprocessors from the 4004 up to Pentium (Spanish only)">Intel Microprocessors</a>
</li>
</ul>
</li>
<li>
Mathematics
<ul class="alignleft">
<li>
<a href="CALTORS.HTM" title="Java and Javascript programs implementing calculators">Calculators</a>
</li>
<li>
<a href="NUMBERT.HTM" title="Articles and programs about number theory">Number Theory</a>
</li>
<li>
<a href="PROBLEMS.HTM" title="Interesting math problems">Problems</a>
</li>
</ul>
</li>
<li>
Programs
<ul class="alignright">
<li>
<a href="ASSEM386.HTM" title="Programs written in 80386 Assembler">Assembler 80386</a>
</li>
<li>
<a href="JAVAPROG.HTM" title="Programs written in Java">Java</a>
</li>
<li>
<a href="GAMES.HTM" title="Computer games">Games</a>
</li>
</ul>
</li>
<li class="alignright">
Contact
<ul class="alignright">
<li>
<a href="EPERS.HTM" title="Personal information">Personal</a>
</li>
<li>
<a href="FORM.HTM" title="Form to send comments">Comments</a>
</li>
<li>
<a href="EGBOOK.HTM" title="Old and new guestbook">Guestbook</a>
</li>
<li>
<a href="DONATION.HTM" title="Donations to the author of this Web site">Donations</a>
</li>
</ul>
</li>
</ul>
<br style="clear:both;"/>
</nav>
<main id="main">
<article>
<h1>Sum of cubes</h1>
<div id="a" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemref="b" style="display:inline;">
<a href="ENGLISH.HTM" itemprop="url">
<span itemprop="title">Alpertron</span>
</a> ›
</div>
<div id="b" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" itemref="c" style="display:inline;">
<a href="JAVAPROG.HTM" itemprop="url">
<span itemprop="title">Programs</span>
</a> ›
</div>
<div id="c" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" style="display:inline;">
<a href="FCUBES.HTM" itemprop="url">
<span itemprop="title">Sum of four cubes</span>
</a>
</div>
<form class="applet">
<label for="num">Number to be decomposed in sum of cubes</label>
<textarea id="num" rows="4" class="input"></textarea>
<div class="lf"></div>
<input type="button" id="calc" value="Sum of cubes" />
<input type="button" id="stop" value="Stop" />
<input type="button" id="helpbtn" value="Help" />
<input type="button" id="openwizard" value="Wizard" />
<div class="lf"></div>
<label for="digits">Number of digits per group:</label>
<input type="number" id="digits" value="6"/>
</form>
<div class="pad">
<div id="help" aria-live="polite">
<p>This applet finds the decomposition of any integer number not congruent to 4 or 5 (mod 9) into a sum of four cubes.</p>
<h2>Formulas</h2>
<p>The applet uses the following formulas:</p>
<ul>
<li>
6x = <span class="offscr">parenthesis</span>(x &minus; 1<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 1<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
6x + 3 = x<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(2x &minus; 5<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;2x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 1 = <span class="offscr">parenthesis</span>(2x + 14<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;2x &minus; 23<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x &minus; 26<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x + 30<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 7 = <span class="offscr">parenthesis</span>(x + 2<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(6x &minus; 1<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(8x &minus; 2<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;9x + 2<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 8 = <span class="offscr">parenthesis</span>(x &minus; 5<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x + 14<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x + 29<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x &minus; 30<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
54x + 20 = <span class="offscr">parenthesis</span>(3x &minus; 11<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x + 10<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 2<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x + 7<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
72x + 56 = <span class="offscr">parenthesis</span>(&minus;9x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(6x &minus; 2<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(8x &minus; 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
108x + 2 = <span class="offscr">parenthesis</span>(&minus;x &minus; 22<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x &minus; 41<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x + 43<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
216x + 92 = <span class="offscr">parenthesis</span>(3x &minus; 164<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x + 160<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x &minus; 35<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x + 71<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 146 = <span class="offscr">parenthesis</span>(&minus;60x + 91<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x + 13<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(22x &minus; 37<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(59x &minus; 89<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 200 = <span class="offscr">parenthesis</span>(3x + 259<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x &minus; 254<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 62<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;x &minus; 107<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 218 = <span class="offscr">parenthesis</span>(&minus;3x &minus; 56<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x + 31<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;5x &minus; 69<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(5x + 78<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
432x + 380 = <span class="offscr">parenthesis</span>(&minus;3x + 64<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x &minus; 80<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(2x &minus; 29<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;2x + 65<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
540x + 38 = <span class="offscr">parenthesis</span>(5x &minus; 285<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;5x + 267<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x &minus; 140<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x + 190<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
810x + 56 = <span class="offscr">parenthesis</span>(5x &minus; 755<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;5x + 836<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(9x &minus; 1445<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;9x + 1420<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
1080x + 380 = <span class="offscr">parenthesis</span>(&minus;x &minus; 1438<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(x + 1258<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;3x &minus; 4037<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(3x + 4057<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
1620x + 1334 = <span class="offscr">parenthesis</span>(&minus;5x &minus; 3269<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(5x + 3107<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;9x &minus; 5714<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(9x + 5764<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
1620x + 1352 = <span class="offscr">parenthesis</span>(&minus;5x + 434<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(5x &minus; 353<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(9x &minus; 722<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;9x + 697<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
2160x + 362 = <span class="offscr">parenthesis</span>(&minus;5x &minus; 180<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(5x + 108<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;6x &minus; 149<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(6x + 199<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
<li>
6480x + 794 = <span class="offscr">parenthesis</span>(&minus;5x &minus; 83<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(5x + 11<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;6x &minus; 35<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(6x + 85<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</li>
</ul>
<p>
If n = 164, 596, 1892, 2324, 2756, 4052, 4484 (mod 6480) the following formula is used:
</p>
<p>
54x + 2 = <span class="offscr">parenthesis</span>(29484x<span class="bigger">²</span> + 2211x + 43<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;29484x<span class="bigger">²</span> &minus; 2157x &minus; 41<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(9828x<span class="bigger">²</span> + 485x + 4<span class="offscr">close parenthesis</span>)<span class="bigger">³</span> + <span class="offscr">parenthesis</span>(&minus;9828x<span class="bigger">²</span> &minus; 971x &minus; 22<span class="offscr">close parenthesis</span>)<span class="bigger">³</span>
</p>
<p>
If n = 254, 902, 1442, 1874, 1982, 2414, 3062, 3494, 3602, 4034, 4142, 5114, 5222, 5654, 5762, 6302 (mod 6480) a method due to Demjanenko is used. Notice that the results can have hundreds of digits in this case.
</p>
<p>
In the remaining cases the number n is replaced by &minus;n and then all solutions are multiplied by &minus;1.
</p>
<h2>Expressions</h2>
<p>You can enter numbers or numeric expressions in the input box including parentheses. The operations supported are:</p>
<ul>
<li> + for addition
<li> - for subtraction
<li> * for multiplication
<li> / for integer division
<li> % for modulus (remainder of the integer division)
<li> ^ or ** for exponentiation (the exponent must be greater than or equal to zero).</li>
<li> <strong>&lt;</strong>, <strong>==</strong>, <strong>&gt;</strong>; <strong>&lt;=</strong>, <strong>&gt;=</strong>, != for comparisons. The operators return zero for false and -1 for true.</li>
<li> <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>, <strong>NOT</strong> for binary logic.
<li> <strong>SHL</strong>: Shift left the number of bits specified on the right operand.
<li> <strong>SHR</strong>: Shift right the number of bits specified on the right operand.
<li> <strong>n!</strong>: factorial (<var>n</var> must be greater than or equal to zero).</li>
<li> <strong>p#</strong>: primorial (product of all primes less or equal than <var>p</var>).</li>
<li> <strong>B(n)</strong>: Previous probable prime before <em>n</em></li>
<li> <strong>F(n)</strong>: Fibonacci number F<sub>n</sub></li>
<li> <strong>L(n)</strong>: Lucas number L<sub>n</sub> = F<sub><var>n</var>-1</sub> + F<sub><var>n</var>+1</sub></li>
<li> <strong>N(n)</strong>: Next probable prime after <em>n</em></li>
<li> <strong>P(n)</strong>: Unrestricted Partition Number (number of decompositions of <var>n</var> into sums of integers without regard to order).</li>
<li> <strong>Gcd(m,n)</strong>: Greatest common divisor of these two integers.</li>
<li> <strong>Modinv(m,n)</strong>: inverse of <var>m</var> modulo <var>n</var>, only valid when gcd(m,n)=1.</li>
<li> <strong>Modpow(m,n,r)</strong>: finds <var>m</var><sup><var>n</var></sup> modulo <var>r</var>.</li>
<li> <strong>IsPrime(n)</strong>: returns zero if <var>n</var> is not probable prime, -1 if it is.</li>
<li> <strong>NumDigits(n,r)</strong>: Number of digits of <var>n</var> in base <var>r</var>.</li>
<li> <strong>SumDigits(n,r)</strong>: Sum of digits of <var>n</var> in base <var>r</var>.</li>
<li> <strong>RevDigits(n,r)</strong>: finds the value obtained by writing backwards the digits of <var>n</var> in base <var>r</var>.</li>
</ul>
<p>You can use the prefix <em>0x</em> for hexadecimal numbers, for example 0x38 is equal to 56.</p>
<h2>Batch processing</h2>
<p>Write an expression per line, then press the Sum if cubes button. The output will be placed in the lower pane.</p>
<p>Blank lines or comment lines (which start with a numeral '#' character) will be replicated on the lower pane.</p>
<p>Expression loop: with the following syntax you can factor or determine primality of several numbers typing only one line.
You have to type four or five expressions separated by semicolons:</p>
<ul>
<li>First expression: It must start with the string 'x=' and it sets the first value of x.</li>
<li>Second expression: It must start with the string 'x=' and it sets the next value of x.
<li>Third expression: It holds the end expression condition. If it is equal to zero (meaning false) the loop finishes, otherwise the loop continues.
<li>Fourth expression: It holds the expression to be expressed as a sum of cubes.</li>
<li>Optional fifth expression: If this expression is different from zero (meaning true), the fourth expression is processed, and if is zero (meaning false), the fourth expression is ignored.
</ul>
<p>Except for the first expression, all other expressions must include the variable <var>x</var> and/or the counter <var>c</var>.</p>
<p>If the end expression is false after processing 1000 numbers, the Continue button will appear. Pressing this button will make the program to process the next 1000 numbers and so on.</p>
<p>Example 1: Find the decomposition in a sum of cubes of the numbers from 0 to 5000.
The line to type is: <code>x=0;x=x+1;x&lt;=5000;x</code>. The calculator will show the results in blocks of 1000 values. You will need to press the Continue button to get the next block.</p>
<p>Example 2: Find the decomposition in a sum of cubes of the first 100 numbers of the form prime minus one.
The line to type is: <code>x=3;x=n(x);c&lt;=100;x-1</code>.</p>
<h2>Source code</h2>
<p>
You can download the source of the current program and the old sum of four cubes applet from <a href="https://github.com/alpertron/calculators">GitHub</a>. Notice that the source code is in C language and you need the <a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html">Emscripten</a> environment in order to generate Javascript.
</p>
<p>Written by Dario Alpern. Last updated 25 July 2018.</p>
</div>
<div id="helphelp"></div>
<div id="result" aria-live="polite"></div>
<div id="status"></div>
</div>
<form id="cont" class="pad">
<input type="button" id="continue" value="Continue" />
</form>
<p>If you find any error or you have a comment, please fill in the <a href="#" id="formlink">form</a>.</p>
</article>
</main>
<aside id="wizard">
<h1>Sum of cubes wizard</h1>
<form class="applet">
<fieldset id="output" class="atright">
<legend>Output</legend>
<input type="radio" name="output" id="decW"><label for="decW"><span class="und">D</span>ecimal</label><br>
<input type="radio" name="output" id="hexW"><label for="hexW"><span class="und">H</span>exadecimal</label><br>
</fieldset>
<fieldset id="mode">
<legend>Wizard mode</legend>
<input type="radio" name="mode" id="oneexpr"><label for="oneexpr"><span class="und">P</span>rocess one expression</label><br>
<input type="radio" name="mode" id="loop"><label for="loop"><span class="und">P</span>rocess several expressions in a loop</label><br>
</fieldset>
<label for="wzdinput" id="wzddesc">1</label>
<br class="newline"/>
<input type="text" id="wzdinput" value="" placeholder="Number or numerical expression" class="input"/>
<br class="newline"/>
<p id="wzdexam">&nbsp;</p>
<input type="button" id="next" value="Next" />
<input type="button" id="cancel" value="Cancel" />
</form>
<h2>Expressions</h2>
<p>You can enter expressions that use the following operators, functions and parentheses:</p>
<p>
<ul>
<li> + for addition
<li> - for subtraction
<li> * for multiplication
<li> / for integer division
<li> % for modulus (remainder of the integer division)
<li> ^ or ** for exponentiation (the exponent must be greater than or equal to zero).</li>
<li> <strong>&lt;</strong>, <strong>==</strong>, <strong>&gt;</strong>; <strong>&lt;=</strong>, <strong>&gt;=</strong>, != for comparisons. The operators return zero for false and -1 for true.</li>
<li> <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>, <strong>NOT</strong> for binary logic.</li>
<li> <strong>SHL</strong>: Shift left the number of bits specified on the right operand.</li>
<li> <strong>SHR</strong>: Shift right the number of bits specified on the right operand.</li>
<li> <strong>n!</strong>: factorial (<var>n</var> must be greater than or equal to zero).</li>
<li> <strong>p#</strong>: primorial (product of all primes less or equal than <var>p</var>).</li>
<li> <strong>B(n)</strong>: Previous probable prime before <em>n</em></li>
<li> <strong>F(n)</strong>: Fibonacci number F<sub>n</sub></li>
<li> <strong>L(n)</strong>: Lucas number L<sub>n</sub> = F<sub><var>n</var>-1</sub> + F<sub><var>n</var>+1</sub></li>
<li> <strong>N(n)</strong>: Next probable prime after <em>n</em></li>
<li> <strong>P(n)</strong>: Unrestricted Partition Number (number of decompositions of <var>n</var> into sums of integers without regard to order).</li>
<li> <strong>Gcd(m,n)</strong>: Greatest common divisor of these two integers.</li>
<li> <strong>Modinv(m,n)</strong>: inverse of <var>m</var> modulo <var>n</var>, only valid when gcd(m,n)=1.</li>
<li> <strong>Modpow(m,n,r)</strong>: finds <var>m</var><sup><var>n</var></sup> modulo <var>r</var>.</li>
<li> <strong>IsPrime(n)</strong>: returns zero if <var>n</var> is not probable prime, -1 if it is.</li>
<li> <strong>NumDigits(n,r)</strong>: Number of digits of <var>n</var> in base <var>r</var>.</li>
<li> <strong>SumDigits(n,r)</strong>: Sum of digits of <var>n</var> in base <var>r</var>.</li>
<li> <strong>RevDigits(n,r)</strong>: finds the value obtained by writing backwards the digits of <var>n</var> in base <var>r</var>.</li>
<li id="C">Variable <var>C</var>: number of expressions already processed.</li>
<li id="X">Variable <var>X</var>: variable changed on each iteration of the loop.</li>
</ul>
<p>You can use the prefix <em>0x</em> for hexadecimal numbers, for example 0x38 is equal to 56.</p>
</aside>
<aside id="feedback">
<h1>Feedback form</h1>
<form class="applet" id="formfeedback">
<input type="hidden" name="subject" value="Sum of cubes calculator feedback" />
<div id="formleft">
<div class="labels"><label for="name">Your name is:</label><input class="inputfbck" type="text" name="name" maxlength="40" id="name" autocomplete="name"/></div>
<div class="labels"><label for="age">Age:</label><input class="inputfbck" type="number" name="age" min="0" max="999" id="age" /></div>
<div class="labels"><label for="city">City:</label><input class="inputfbck" type="text" name="city" maxlength="70" id="city" autocomplete="address-level2"/></div>
<div class="labels"><label for="province">Province/State:</label><input class="inputfbck" type="text" name="province" maxlength="70" id="province" autocomplete="address-level1"/></div>
<div class="labels"><label for="country">Country:</label><input class="inputfbck" type="text" name="country" maxlength="70" id="country" autocomplete="country-name" /></div>
<div class="labels"><label for="reply">E-mail address:</label><input class="inputfbck" type="email" name="reply" maxlength="70" id="reply" autocomplete="email" /></div>
<p>Enter your e-mail address if you want a reply from the author of this application.</p>
<p><input type="checkbox" id="adduserdata"><label for="adduserdata">Send expression to be decomposed in sum of cubes</label></p>
<input type="hidden" name="userdata" value="" id="userdata" />
</div>
<div id="formright">
<label for="comments">Please feel free to add comments:</label><br />
<textarea name="Comments" rows="7" cols="40" id="comments"></textarea>
<p><label for="how">How did you find my page?</label><br />
<select name="how" title="How did you find my page?" id="how">
<option value="Select response">Select response</option>
<option value="from a search engine">From a search engine</option>
<option value="from a friend">From a friend</option>
<option value="from a link">From a link</option>
<option value="from Wikipedia">From Wikipedia or another reference</option>
<option value="other">Other</option>
</select></p>
<fieldset><legend>Are the programs instructive?</legend>
<input type="radio" name="Instructive" value="Yes" id="insyes" /><label for="insyes">Yes</label>
<input type="radio" name="Instructive" value="No" id="insno" /><label for="insno">No</label>
</fieldset>
<fieldset><legend>Are the programs interesting?</legend>
<input type="radio" name="Interesting" value="Yes" id="intyes" /><label for="intyes">Yes</label>
<input type="radio" name="Interesting" value="No" id="intno" /><label for="intno">No</label>
</fieldset>
<p><input type="submit" value="Send it in!" id="formsend" />
<input type="reset" value="Reset" />
<input type="button" value="Cancel" id="formcancel" /></p>
</div>
<div class="lf"></div>
</form>
</aside>
<script>
<!--
(function(){function a(a){return document.getElementById(a)}function k(d,b){a("calc").style.display=d;a("openwizard").style.display=d;null!=a("stop")&&(a("stop").style.display=b)}function q(d){var b=a("helphelp");l||(v?t||(t=new Blob([new Uint8Array(x)])):t||(t=new Blob(Array.prototype.map.call(document.querySelectorAll("script[type='text/js-worker']"),function(a){return a.textContent}),{type:"text/javascript"})),l=new Worker(window.URL.createObjectURL(t)),l.onmessage=function(b){var c=b.data.substring(0,
1);if("4"==c)a("status").innerHTML=b.data.substring(1);else if(a("result").innerHTML=b.data.substring(1),"2"==c||"6"==c)a("status").innerHTML="",k("inline","none"),"6"==c&&(a("cont").style.display="block")});b.style.display="block";b.innerHTML='<p class="pad">Press the <strong>Help</strong> button to get help about this application. Press it again to return to this screen. Keyboard users can press CTRL+ENTER to start calculation. This is the '+(v?"asm.js":"WebAssembly")+" version.</p>";v?l.postMessage(d):
l.postMessage([d,x])}function w(){var d,b,e;d=a("result");d.style.display="block";b=a("num").value;""==b?d.innerHTML="Please type a number or expression.":(e=a("digits").value,a("help").style.display="none",d.innerHTML="Computing sum of cubes...",param=e+","+(2+64*u)+","+b+String.fromCharCode(0),k("none","inline"),q(param))}function g(){a("next").value="Done";a("wzddesc").innerHTML="Step 1 of 1: Expression to factor";a("wzdexam").innerHTML="&nbsp;";f="";h=9}function m(){a("next").value="Next";a("wzddesc").innerHTML=
"Step 1 of 5: Initial value of x";a("wzdexam").innerHTML="Do not use variables <var>x</var> or <var>c</var>. Example for Smith numbers less than 10000: <code>1</code>";h=1}function r(){var d=a("next"),b=a("wzddesc"),e=a("wzdexam"),c=a("wzdinput"),n=a("num");d.disabled=!0;switch(++h){case 2:f+="x="+c.value;a("mode").style.display="none";b.innerHTML="Step 2 of 5: Value of x for new iteration";e.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x+1</code>";
break;case 3:f+=";x="+c.value;b.innerHTML="Step 3 of 5: End loop condition";e.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x&lt;10000</code>";break;case 4:f+=";"+c.value;b.innerHTML="Step 4 of 5: Expression to factor";e.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>x</code>";break;case 5:f+=";"+c.value;d.value="Done";d.disabled=!1;b.innerHTML="Step 5 of 5: Process expression condition";
e.innerHTML="Variables <var>x</var> and/or <var>c</var> required. Example for Smith numbers less than 10000: <code>sumdigits(x,10) == sumdigits(concatfact(2,x),10) and not isprime(x)</code>";break;case 6:""!=c.value&&(f+=";"+c.value);n.value=f;h=0;u=a("hexW").checked?1:0;a("main").style.display="block";a("wizard").style.display="none";n.focus();break;default:h=0,n.value=c.value,u=a("hexW").checked?1:0,a("main").style.display="block",a("wizard").style.display="none",n.focus()}h&&(c.value="",c.focus())}
function y(){a("main").style.display="block";a("feedback").style.display="none";a("value").focus()}var h=0,f,l=0,x=0,u=0,t,v="undefined"===typeof WebAssembly,p=new XMLHttpRequest;p.open("GET",v?"fsquaresW0060.js":"fsquares0060.wasm",!0);p.responseType="arraybuffer";p.onreadystatechange=function(){4==p.readyState&&200==p.status&&(x=p.response)};p.send(null);addEventListener("load",function(){var d;a("num").onkeypress=function(b){var e,c=a("digits").value;e=a("result");e.style.display="block";var n=
a("num").value;b||(b=window.event);13==(b.keyCode||b.which)&&(""==n?e.innerHTML="Please type a number or expression.":(e.innerHTML="Computing sum of cubes...",d=c+",2,"+n+String.fromCharCode(0),k("none","inline"),q(d)))};a("calc").onclick=function(){w()};a("openwizard").onclick=function(){a("main").style.display="none";a("wizard").style.display="block";a("mode").style.display="block";a("oneexpr").checked=!0;a("next").disabled=!0;a("hexW").checked=u?!0:!1;a("decW").checked=u?!1:!0;a("wzdinput").value=
"";a("wzdinput").focus();g()};a("wzdinput").onkeydown=function(b){if(10==b.keyCode||13==b.keyCode)b.preventDefault(),0==a("next").disabled&&r();b.altKey&&(80==b.keyCode?(b.preventDefault(),a("oneexpr").checked?(a("oneexpr").checked=!1,a("loop").checked=!0,m()):(a("oneexpr").checked=!0,a("loop").checked=!1,g())):68==b.keyCode?(b.preventDefault(),a("decW").checked=!0,a("hexW").checked=!1):72==b.keyCode&&(b.preventDefault(),a("decW").checked=!1,a("hexW").checked=!0));return!0};a("oneexpr").onclick=function(){g()};
a("loop").onclick=function(){m()};a("next").onclick=function(){r()};a("wzdinput").oninput=function(){var b=a("wzdinput").value;a("next").disabled=""!=b?1==h||9==h||0<=b.lastIndexOf("x")||0<=b.lastIndexOf("c")||0<=b.lastIndexOf("X")||0<=b.lastIndexOf("C")?!1:!0:5==h?!1:!0};a("cancel").onclick=function(){a("main").style.display="block";a("wizard").style.display="none"};null!=a("stop")&&(a("stop").onclick=function(){l.terminate();l=0;k("inline","none");a("result").innerHTML="<p>Calculation stopped by user</p>";
a("status").innerHTML=""});null!=a("continue")&&(a("continue").onclick=function(){a("cont").style.display="none";q("C")});a("num").onkeydown=function(a){10!=a.keyCode&&13!=a.keyCode||!a.ctrlKey||(a.preventDefault(),w());return!0};a("helpbtn").onclick=function(){var b=a("help").style,e=a("helphelp").style,c=a("result"),d=c.style;"block"==b.display&&""!=c.innerHTML?(b.display="none",e.display=d.display="block"):(b.display="block",e.display=d.display="none")};a("formlink").onclick=function(){a("main").style.display=
"none";a("feedback").style.display="block";a("formfeedback").reset();a("name").focus();return!1};a("formcancel").onclick=function(){y()};a("formsend").onclick=function(){a("userdata").value=a("adduserdata").checked?"\n"+a("num").value+"\n"+a("result").innerHTML+"\n"+a("status").innerHTML:"";var b=new XMLHttpRequest;b.onreadystatechange=function(){4==b.readyState&&(200==b.status?alert("Feedback sent successfully."):alert("Feedback could not be sent."),y())};b.open("POST","/sendmail.php",!0);b.setRequestHeader("Content-type",
"application/x-www-form-urlencoded");for(var d=a("formfeedback").elements,c="",f=0,g=0;g<d.length;g++){var h=d[g];h.name&&(f&&(c+="&"),c+=h.name+"="+encodeURIComponent(h.value),f++)}b.send(c);return!1};"serviceWorker"in navigator&&navigator.serviceWorker.register("calcSW.js").then(function(){},function(){})})})(this);
addEventListener("load",function(){(function(a,k,q,w,g,m,r){a.GoogleAnalyticsObject=g;a[g]=a[g]||function(){(a[g].a=a[g].a||[]).push(arguments)};a[g].b=1*new Date;m=k.createElement(q);r=k.getElementsByTagName(q)[0];m.async=1;m.src=w;r.parentNode.insertBefore(m,r)})(window,document,"script","https://www.google-analytics.com/analytics.js","ga");ga("create","UA-4438475-1","auto");ga("send","pageview")});
//-->
</script>
<script type="text/js-worker">
var e,g,k,l={env:{databack:function(b){var a=-1,c=0,f="",d="";do{for(c=0;1024>c;c++){a=g[b++>>0];if(0==a)break;128<=a&&(a=(a-192<<6)+g[b++>>0]-128);f+=String.fromCharCode(a)}d+=f;f=""}while(0!=a);self.postMessage(d+f)},tenths:function(){return Math.floor((new Date).getTime()/100)}}};
self.onmessage=function(b){k?(m(e.getInputStringPtr(),b.data[0]),e.doWork()):WebAssembly.instantiate(b.data[1],l).then(function(a){k=1;e=a.instance.exports;g=new Uint8Array(e.memory.buffer);m(e.getInputStringPtr(),b.data[0]);e.doWork()})};function m(b,a){var c=b,f=a.length,d,h;for(d=0;d<f;d++)h=a.charCodeAt(d),128>h?g[c++]=h:(g[c++]=(h>>6)+192,g[c++]=(h&63)+128);g[c]=0};
</script>
</body>
</html>
