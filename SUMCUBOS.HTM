<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="Author" content="Dario Alejandro Alpern" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="keywords" content="waring, teoría de números" />
<meta name="description" content="Aplicación Javascript application que descompone un número en una suma de cuatro cubos. Hecho por Dario Alpern." />
<meta name="theme-color" content="#db5945">
<link rel="alternate" hreflang="en" href="FCUBES.HTM" />
<link rel="prefetch" href="fsquaresW0045.js" />
<link rel="manifest" href="sumcubos.webmanifest">
<link rel="icon" href="favicon.ico" type="image/x-icon" />
<title>Suma de cuatro cubos</title>
<style media="print">
#smallheader {display:none;}
</style>
<style media="screen">
#smallheader {background-color:#000080; width:100%; margin:0px; text-align:center;}
#smallheader ul { padding:0; margin:0 auto; list-style:none; display:inline-block;}
#smallheader li { float:left; position:relative; display:block; margin-top:0px; margin-bottom:0px; margin-left:5px; margin-right:5px; background-color:#000080; color:#FFFFFF; font-family:"Arial", sans-serif; cursor: pointer; text-align:left;}
#smallheader li:hover {background-color:#004000; color:#FFFFFF;}
#smallheader li ul { display:none; position:absolute; }
#smallheader li:hover ul.alignleft{ display:block; height:auto;}
#smallheader li:hover ul.alignright{ display:block; height:auto; right:0px; background-color:#004000;}
#smallheader li ul li{ clear:both; white-space: nowrap; border:0px; background-color:#004000; width:100%; padding-top:1em; padding-bottom:0.5em}
#smallheader a:link{color:#FFFFFF; text-decoration: none;}
#smallheader a:visited{color:#FFFFFF; text-decoration: none;}
#smallheader a:hover{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader a:active{background-color:#004000; color:#FFFFFF; text-decoration: none;}
#smallheader li ul li a:link{background-color:#004000; color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:visited{background-color:#004000;color:#FFFFFF; display:block; width:100%;}
#smallheader li ul li a:hover{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
#smallheader li ul li a:active{background-color:#FFFFFF; color:#004000; display:block; width:100%;}
@media (max-width: 400px) { #smallheader { font-size:0.7em;} }
@media (min-width: 400px) { #smallheader { font-size:1em;} }
</style>
<style>
body {font-family: arial; margin: 0; padding: 0;}
h1 {text-align:center;}
.applet {margin-left: auto;margin-right: auto; border: 0px none;width:95%;text-align:center;background-color:#c0c0c0;padding:10px;}
.atright {float:right;}
#num {white-space:pre;overflow-wrap:normal;overflow:auto;margin:5px;width:100%;padding:3px}
#stop, #cont, #wizard {display:none}
.lf {padding:0.2em; clear:both; width:100%}
.offscr {position:absolute;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);padding:0;border:0;height:1px;width:1px;overflow:hidden;}
.bigger {font-size:150%;}
.pad {padding:10px;}
.hex {font-family: Courier, "Lucida Console", monospace}
.und {text-decoration: underline;}
@media (min-width: 400px) {.input {width: calc(100% - 6em);float:right;padding:3px;margin:0px;}}
@media (max-width: 400px) {.input {width:100%;padding:3px;margin:0px;}}
</style>
</head>
<body>
<nav id="smallheader">
<div style="padding:0px;float:right;">
<a href="ENGLISH.HTM" hreflang="en" title="Dario Alpern's Web site in English">ENG</a>
</div>
<ul>
<li>
Electrónica
<ul class="alignleft">
<li>
<a href="INTEL.HTM" title="Todos los microprocesadores de Intel desde el 4004 al Pentium">Microprocesadores Intel</a>
</li>
</ul>
</li>
<li>
Matemáticas
<ul class="alignleft">
<li>
<a href="CALDORAS.HTM" title="Programas en Java y Javascript que implementan calculadoras">Calculadoras</a>
</li>
<li>
<a href="TNUMEROS.HTM" title="Artículos y programas sobre teoría de números">Teoría de números</a>
</li>
<li>
<a href="PROBLEMAS.HTM" title="Problemas matemáticos interesantes">Problemas</a>
</li>
</ul>
</li>
<li>
Programas
<ul class="alignright">
<li>
<a href="ENSAM386.HTM" title="Programas escritos en lenguaje ensamblador del 80386">Assembler 80386</a>
</li>
<li>
<a href="PROGJAVA.HTM" title="Programas escritos en Java">Java</a>
</li>
<li>
<a href="JUEGOS.HTM" title="Juegos en línea y para descargar">Juegos</a>
</li>
</ul>
</li>
<li class="alignright">
Contacto
<ul class="alignright">
<li>
<a href="PERSONAL.HTM" title="Información personal">Personal</a>
</li>
<li>
<a href="FORMULAR.HTM" title="Formulario para enviar comentarios">Comentarios</a>
</li>
<li>
<a href="GBOOK.HTM" title="Viejo y nuevo libro de visitas">Libro de invitados</a>
</li>
<li>
<a href="DONATION.HTM" title="Donaciones al autor de este sitio Web">Donaciones</a>
</li>
</ul>
</li>
</ul>
<br style="clear:both;" />
</nav>
<main id="main">
<article>
<h1>Suma de cuatro cubos</h1>
<div id="a" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemref="b" style="display:inline;">
<a href="/" itemprop="url">
<span itemprop="title">Alpertron</span>
</a> ›
</div>
<div id="b" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" itemref="c" style="display:inline;">
<a href="PROGJAVA.HTM" itemprop="url">
<span itemprop="title">Programas</span>
</a> ›
</div>
<div id="c" itemscope="itemscope" itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" style="display:inline;">
<a href="SUMCUBOS.HTM" itemprop="url">
<span itemprop="title">Suma de cuatro cubos</span>
</a>
</div><br><br>
<form id="applet" class="applet">
<label for="num">Número a descomponer en suma de cubos</label>
<textarea id="num" rows="4" class="input"></textarea>
<div class="lf"></div>
<input type="button" id="calc" value="Suma de cubos" />
<input type="button" id="stop" value="Parar" />
<input type="button" id="helpbtn" value="Ayuda" />
<input type="button" id="openwizard" value="Asistente" />
<div class="lf"></div>
<label for="digits">Cantidad de dígitos por grupo:</label>
<input type="number" id="digits" value="6"/>
<input type="hidden" id="app" value="3"/>
</form>
<script async="async" src="fsquares0045.js"></script>
<div style='padding:10px;'>
<div id="help" aria-live="polite">
<p>Este applet encuentra la descomposición de cualquier número entero no congruente a 4 ó 5 (mod 9) en una suma de cuatro cubos.</p>
<h2>Fórmulas</h2>
<p>El applet usa las siguientes fórmulas:</p>
<ul>
<li>
6x = <span class="offscr">abrir paréntesis</span>(x &minus; 1<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 1<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
6x + 3 = x<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(2x &minus; 5<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;2x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 1 = <span class="offscr">abrir paréntesis</span>(2x + 14<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;2x &minus; 23<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x &minus; 26<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x + 30<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 7 = <span class="offscr">abrir paréntesis</span>(x + 2<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(6x &minus; 1<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(8x &minus; 2<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;9x + 2<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
18x + 8 = <span class="offscr">abrir paréntesis</span>(x &minus; 5<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x + 14<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x + 29<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x &minus; 30<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
54x + 20 = <span class="offscr">abrir paréntesis</span>(3x &minus; 11<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x + 10<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 2<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x + 7<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
72x + 56 = <span class="offscr">abrir paréntesis</span>(&minus;9x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(6x &minus; 2<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(8x &minus; 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
108x + 2 = <span class="offscr">abrir paréntesis</span>(&minus;x &minus; 22<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x &minus; 41<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x + 43<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
216x + 92 = <span class="offscr">abrir paréntesis</span>(3x &minus; 164<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x + 160<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x &minus; 35<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x + 71<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 146 = <span class="offscr">abrir paréntesis</span>(&minus;60x + 91<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x + 13<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(22x &minus; 37<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(59x &minus; 89<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 200 = <span class="offscr">abrir paréntesis</span>(3x + 259<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x &minus; 254<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 62<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;x &minus; 107<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
270x + 218 = <span class="offscr">abrir paréntesis</span>(&minus;3x &minus; 56<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x + 31<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;5x &minus; 69<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(5x + 78<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
432x + 380 = <span class="offscr">abrir paréntesis</span>(&minus;3x + 64<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x &minus; 80<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(2x &minus; 29<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;2x + 65<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
540x + 38 = <span class="offscr">abrir paréntesis</span>(5x &minus; 285<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;5x + 267<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x &minus; 140<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x + 190<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
810x + 56 = <span class="offscr">abrir paréntesis</span>(5x &minus; 755<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;5x + 836<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(9x &minus; 1445<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;9x + 1420<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
1080x + 380 = <span class="offscr">abrir paréntesis</span>(&minus;x &minus; 1438<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(x + 1258<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;3x &minus; 4037<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(3x + 4057<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
1620x + 1334 = <span class="offscr">abrir paréntesis</span>(&minus;5x &minus; 3269<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(5x + 3107<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;9x &minus; 5714<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(9x + 5764<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
1620x + 1352 = <span class="offscr">abrir paréntesis</span>(&minus;5x + 434<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(5x &minus; 353<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(9x &minus; 722<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;9x + 697<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
2160x + 362 = <span class="offscr">abrir paréntesis</span>(&minus;5x &minus; 180<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(5x + 108<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;6x &minus; 149<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(6x + 199<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
<li>
6480x + 794 = <span class="offscr">abrir paréntesis</span>(&minus;5x &minus; 83<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(5x + 11<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;6x &minus; 35<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(6x + 85<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</li>
</ul>
<p>
Si n = 164, 596, 1892, 2324, 2756, 4052, 4484 (mod 6480) se utiliza la fórmula:
</p>
<p>
54x + 2 = <span class="offscr">abrir paréntesis</span>(29484x<span class="bigger">²</span> + 2211x + 43<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;29484x<span class="bigger">²</span> &minus; 2157x &minus; 41<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(9828x<span class="bigger">²</span> + 485x + 4<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span> + <span class="offscr">abrir paréntesis</span>(&minus;9828x<span class="bigger">²</span> &minus; 971x &minus; 22<span class="offscr">cerrar paréntesis</span>)<span class="bigger">³</span>
</p>
<p>
Si n = 254, 902, 1442, 1874, 1982, 2414, 3062, 3494, 3602, 4034, 4142, 5114, 5222, 5654, 5762, 6302 (mod 6480) se utiliza un m&eacute;todo debido a Demjanenko que puede dar resultados de cientos de dígitos.
</p>
<p>
En el resto de los casos se reemplaza n por &minus;n y luego se multiplican las soluciones por &minus;1.
</p>
<p>
Si encuentra algún error o tiene algún comentario, por favor llene el <a href="FORMULAR.HTM?Suma+de+cuatro+cubos">formulario</a>.
</p>
<h2>Expresiones</h2>
<p>Además de ingresar números en la caja de entrada, se pueden escribir expresiones numéricas incluyendo paréntesis. A continuación se muestran las operaciones permitidas:</p>
<ul>
<li> + para suma
<li> - para resta
<li> * para multiplicación
<li> / para división entera
<li> % para el resto de la división entera
<li> ^ o ** para exponenciación (el exponente debe ser mayor o igual que cero).
<li> <strong>&lt;</strong>, <strong>==</strong>, <strong>&gt;</strong>; <strong>&lt;=</strong>, <strong>&gt;=</strong>, != para comparaciones. Los operadores devuelven cero si es falso y -1 si es verdadero.
<li> <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>, <strong>NOT</strong> para lógica binaria.
<li> <strong>SHL</strong>: Desplazar a la izquierda la cantidad de bits indicada en el operando derecho.
<li> <strong>SHR</strong>: Desplazar a la derecha la cantidad de bits indicada en el operando derecho.
<li> <strong>n!</strong>: factorial (<var>n</var> debe ser mayor o igual que cero).
<li> <strong>p#</strong>: primorial (producto de todos los primos menores o iguales a <var>p</var>).
<li> <strong>B(n)</strong>: Número probablemente primo anterior a <var>n</var></li>
<li> <strong>F(n)</strong>: Número de Fibonacci F<sub>n</sub>
<li> <strong>L(n)</strong>: Número de Lucas L<sub>n</sub> = F<sub><var>n</var>-1</sub> + F<sub><var>n</var>+1</sub>
<li> <strong>N(n)</strong>: Número probablemente primo posterior a <var>n</var></li>
<li> <strong>P(n)</strong>: particiones irrestrictas (cantidad de descomposiciones de <var>n</var> en sumas de números enteros sin tener en cuenta el orden).
<li> <strong>Gcd(m,n)</strong>: Máximo común divisor de estos dos números enteros.
<li> <strong>Modinv(m,n)</strong>: inverso de <var>m</var> modulo <var>n</var>, sólo válido cuando gcd(m,n)=1.
<li> <strong>Modpow(m,n,r)</strong>: halla <var>m</var><sup><var>n</var></sup> módulo <var>r</var>.
<li> <strong>IsPrime(n)</strong>: returna cero si <var>n</var> no es un primo probable y -1 si lo es.
<li> <strong>NumDigits(n,r)</strong>: cantidad de dígitos de <var>n</var> en base <var>r</var>.
<li> <strong>SumDigits(n,r)</strong>: suma de dígitos de <var>n</var> en base <var>r</var>.
<li> <strong>RevDigits(n,r)</strong>: halla el valor que se obtiene escribiendo para atrás los dígitos de <var>n</var> en base <var>r</var>.
</ul>
<p>Puedes usar el prefijo <em>0x</em> para números hexadecimales, por ejemplo 0x38 es igual a 56.</p>
<h2>Código fuente</h2>
<p>
Se puede bajar el código fuente de este programa y el del viejo applet de suma de cuatro cubos desde <a href="https://github.com/alpertron/calculators">GitHub</a>. El código fuente está escrito en lenguaje C, por lo que es necesario <a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html">Emscripten</a> para generar Javascript.
</p>
<p>Escrito por Dario Alpern. Actualizado el 10 de abril de 2018.</p>
</div>
<div id="helphelp"></div>
<div id="result" aria-live="polite"></div>
<div id="status"></div>
</div>
<form id="cont" class="pad">
<input type="button" id="continue" value="Continuar" />
</form>
</article>
</main>
<aside id="wizard">
<h1>Asistente de suma de cubos</h1>
<form class="applet">
<fieldset id="output" class="atright">
<legend>Salida</legend>
<input type="radio" name="output" id="decW"><label for="decW"><span class="und">D</span>ecimal</label><br>
<input type="radio" name="output" id="hexW"><label for="hexW"><span class="und">H</span>exadecimal</label><br>
</fieldset>
<fieldset id="mode">
<legend>Modo asistente</legend>
<input type="radio" name="mode" id="oneexpr"><label for="oneexpr"><span class="und">P</span>rocesar una expresión</label><br>
<input type="radio" name="mode" id="loop"><label for="loop"><span class="und">P</span>rocesar varias expresiones en un ciclo</label><br>
</fieldset>
<label for="wzdinput" id="wzddesc">&nbsp;</label>
<br class="newline"/>
<input type="text" id="wzdinput" value="" placeholder="Número o expresión numérica" class="input"/>
<br class="newline"/>
<p id="wzdexam">&nbsp;</p>
<input type="button" id="next" value="Siguiente" />
<input type="button" id="cancel" value="Cancelar" />
</form>
<h2>Expresiones</h2>
<p>Puedes ingresar expresiones que usen los siguientes operadores y paréntesis:</p>
<p>
<ul>
<li> + para suma
<li> - para resta
<li> * para multiplicación
<li> / para división entera
<li> % para el resto de la división entera
<li> ^ o ** para exponenciación (el exponente debe ser mayor o igual que cero).
<li> <strong>&lt;</strong>, <strong>==</strong>, <strong>&gt;</strong>; <strong>&lt;=</strong>, <strong>&gt;=</strong>, != para comparaciones. Los operadores devuelven cero si es falso y -1 si es verdadero.
<li> <strong>AND</strong>, <strong>OR</strong>, <strong>XOR</strong>, <strong>NOT</strong> para lógica binaria.
<li> <strong>SHL</strong>: Desplazar a la izquierda la cantidad de bits indicada en el operando derecho.
<li> <strong>SHR</strong>: Desplazar a la derecha la cantidad de bits indicada en el operando derecho.
<li> <strong>n!</strong>: factorial (<var>n</var> debe ser mayor o igual que cero).
<li> <strong>p#</strong>: primorial (producto de todos los primos menores o iguales a <var>p</var>).
<li> <strong>B(n)</strong>: Número probablemente primo anterior a <var>n</var></li>
<li> <strong>F(n)</strong>: Número de Fibonacci F<sub>n</sub>
<li> <strong>L(n)</strong>: Número de Lucas L<sub>n</sub> = F<sub><var>n</var>-1</sub> + F<sub><var>n</var>+1</sub>
<li> <strong>N(n)</strong>: Número probablemente primo posterior a <var>n</var></li>
<li> <strong>P(n)</strong>: particiones irrestrictas (cantidad de descomposiciones de <var>n</var> en sumas de números enteros sin tener en cuenta el orden).
<li> <strong>Gcd(m,n)</strong>: Máximo común divisor de estos dos números enteros.
<li> <strong>Modinv(m,n)</strong>: inverso de <var>m</var> modulo <var>n</var>, sólo válido cuando gcd(m,n)=1.
<li> <strong>Modpow(m,n,r)</strong>: halla <var>m</var><sup><var>n</var></sup> módulo <var>r</var>.
<li> <strong>IsPrime(n)</strong>: returna cero si <var>n</var> no es un primo probable y -1 si lo es.
<li> <strong>NumDigits(n,r)</strong>: cantidad de dígitos de <var>n</var> en base <var>r</var>.
<li> <strong>SumDigits(n,r)</strong>: suma de dígitos de <var>n</var> en base <var>r</var>.
<li> <strong>RevDigits(n,r)</strong>: halla el valor que se obtiene escribiendo para atrás los dígitos de <var>n</var> en base <var>r</var>.
<li id="C">Variable <var>C</var>: cantidad de expresiones procesadas.</li>
<li id="X">Variable <var>X</var>: variable que cambia en cada iteración del ciclo.</li>
</ul>
<p>Puedes usar el prefijo <em>0x</em> para números hexadecimales, por ejemplo 0x38 es igual a 56.</p>
</aside>
</body>
</html>
